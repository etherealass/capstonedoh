<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Auth;
use DB;
use App\Users;
use App\User_roles;
use App\Departments;
use App\Services;
use App\Display;
use App\Notify;
use App\Transfer_Requests;
use App\Graduate_Requests;
use Response;
use Session;
use Redirect;

class ServiceController extends Controller
{
    public function create_service()
	{
		$roles = User_roles::where('description','!=','Employee')->get();
		$rolex = User_roles::find(Auth::user()->id);
		$deps = Departments::all();
		$users = Users::find(Auth::user()->id);
        $transfer = Transfer_Requests::all();
        $graduate = Graduate_Requests::all();
                $parent = Services::where('parent', 0)->get();


		
		if(Auth::user()->user_role()->first()->name == 'Superadmin'){
			return view('superadmin.createservice')->with(['roles' => $roles, 'rolex' => $rolex, 'deps' => $deps, 'users' => $users])->with('transfer',$transfer)->with('graduate',$graduate)->with('parent', $parent);
		}
		elseif(Auth::user()->user_role()->first()->name == 'Admin'){
			return view('superadmin.createservice')->with(['roles' => $roles, 'rolex' => $rolex, 'deps' => $deps, 'users' => $users])->with('transfer',$transfer)->with('graduate',$graduate)->with('parent', $parent);
		}
		else{
			return abort(404);
		}
	}

    public function save_services(Request $request, $id){

           $display = $request->display;

            $services = Services::find($id);

            $services->update(array('parent' => $request->parent, 'name' => $request->servicename, 'description'=> $request->servicedesc));

            $parent = Services::where('id', $services->parent)->get();

            $parentName = $parent[0]->name;

            $role = Display::where('service_id', $id)->pluck('role')->toArray();

            $display = Display::where('service_id', $id)->get();

            $notify_role = Notify::where('service_id', $id)->pluck('role')->toArray();

            $notify = Notify::where('service_id', $id)->get();

            if (isset($request->display)) {
                foreach($request->display as $val) {
                    if(!in_array($val, $role)){

                            $d = new Display;
                            $d->role = $val;
                            $d->service_id = $id;

                            $d->save();

                    }
                }

                foreach ($display as $display_value) {

                    if(!in_array($display_value->role, $request->display)){
                        
                        Display::where('id', $display_value->id)->delete();
                    }
                }
            } else {
                Display::where('service_id', $id)->delete();
            }

            if (isset($request->notify)) {
                foreach($request->notify as $notif_val) {
                    if(!in_array($notif_val, $notify_role)){

                            $d = new Notify;
                            $d->role = $notif_val;
                            $d->service_id = $id;

                            $d->save();

                    }
                }

                foreach ($notify as $notif_value) {

                    if(!in_array($notif_value->role, $request->notify)){
                        
                        Notify::where('id', $notif_value->id)->delete();
                    }
                }
            } else {
                Notify::where('service_id', $id)->delete();
            }
                

             $array = ['servicename'=> $services->name, 'id'=> $services->id, 'parent'=>  $parentName];

            return response::json($array);


    }

	public function show_services()
    {
        $roles = User_roles::where('description','!=','Employee')->get();
        $users = Users::find(Auth::user()->id);
        $deps = Departments::all();
        $transfer = Transfer_Requests::all();
        $service = Services::all();
        $parent = Services::where('parent', 0)->get();
        $graduate = Graduate_Requests::all();


        if(Auth::user()->user_role()->first()->name == 'Superadmin'){
            return view('superadmin.showservices')->with(['roles' => $roles, 'users' => $users, 'deps' => $deps])->with('transfer',$transfer)->with('services',$service)->with('graduate',$graduate)->with('parent', $parent);
        }else if(Auth::user()->user_role()->first()->name == 'Admin'){
<<<<<<< HEAD
           return view('superadmin.showservices')->with(['roles' => $roles, 'users' => $users, 'deps' => $deps])->with('transfer',$transfer)->with('services',$service);
=======
            return view('admin.showservices')->with('roles' , $roles)->with('transfer',$transfer)->with('services',$service)->with('parent', $parent);
        }else if(Auth::user()->user_role()->first()->name == 'Social Worker'){
            return view('socialworker.showservices')->with('roles' , $roles)->with('transfer',$transfer)->with('services',$service)->with('parent', $parent);
>>>>>>> ddce1bd21f21f4f7e0da0759944ec206a0fc018a
        }
    }

    public function add_service(Request $request)
    {	
        
        $graduate = Graduate_Requests::all();
    	$service = Services::create($request->except('_token'));

    	if ($service->save()) {

             if($request->display){

    		$display = [];
        		foreach($request->display as $val) {
        			$d = new Display;
        			$d->role = $val;
        			$display[] = $d;
        		}

                $display = $service->display()->saveMany($display);
            
            }
    		$notify = [];


            if($request->notify){
            		foreach($request->notify as $val) {
            			$d = new Notify;
            			$d->role = $val;
            			$notify[] = $d;
            		}

            		
            $notify = $service->notify()->saveMany($notify);

            }


    	

        	Session::flash('success', 'Service added');
            return back();

        }

    }

    public function viewService(Request $request)
    {   
        
            $service_id = $request->id;
            $services = Services::find($service_id);
            $notify = Notify::where('service_id', $service_id)->with('rolesx')->get();
            $display = Display::where('service_id', $service_id)->with('rolesxe')->get();


               // dd($display);
            $array = ['service'=> $services, 'notify'=> $notify, 'display'=> $display];


                 return response::json($array);



    }

      public function inactiveService(Request $request){

            $set = $request->servicestatus;
            $id = $request->servicesId;

            $inactive = 0;

            if($set == "Delete"){

                  $inactive = 1;
              }else{

                    $inactive =0;
                }

        $services = Services::find($id);

        $services->update(array('inactive' => $inactive));

          if($inactive == 1){
              Session::flash('alert-class', 'danger');
<<<<<<< HEAD
              flash('Intervention Deleted', '')->overlay();
          }else{

            Session::flash('alert-class', 'success');
              flash('Intervetion  Activated', '')->overlay();
          }


             //Redirect::route('show_services');    
=======
              flash('Service Deleted', '')->overlay();
          }else{

            Session::flash('alert-class', 'success');
              flash('Service  Activated', '')->overlay();
          }

>>>>>>> ddce1bd21f21f4f7e0da0759944ec206a0fc018a
            return redirect('/show_services');
     }

}
